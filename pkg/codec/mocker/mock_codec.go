// Code generated by mockery. DO NOT EDIT.

package mocker

import mock "github.com/stretchr/testify/mock"

// MockCodec is an autogenerated mock type for the Codec type
type MockCodec struct {
	mock.Mock
}

type MockCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodec) EXPECT() *MockCodec_Expecter {
	return &MockCodec_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: data, v
func (_m *MockCodec) Decode(data []byte, v any) error {
	ret := _m.Called(data, v)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, any) error); ok {
		r0 = rf(data, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCodec_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockCodec_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - data []byte
//   - v any
func (_e *MockCodec_Expecter) Decode(data interface{}, v interface{}) *MockCodec_Decode_Call {
	return &MockCodec_Decode_Call{Call: _e.mock.On("Decode", data, v)}
}

func (_c *MockCodec_Decode_Call) Run(run func(data []byte, v any)) *MockCodec_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(any))
	})
	return _c
}

func (_c *MockCodec_Decode_Call) Return(_a0 error) *MockCodec_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodec_Decode_Call) RunAndReturn(run func([]byte, any) error) *MockCodec_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: v
func (_m *MockCodec) Encode(v any) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(any) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(any) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(any) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodec_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockCodec_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - v any
func (_e *MockCodec_Expecter) Encode(v interface{}) *MockCodec_Encode_Call {
	return &MockCodec_Encode_Call{Call: _e.mock.On("Encode", v)}
}

func (_c *MockCodec_Encode_Call) Run(run func(v any)) *MockCodec_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *MockCodec_Encode_Call) Return(_a0 []byte, _a1 error) *MockCodec_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodec_Encode_Call) RunAndReturn(run func(any) ([]byte, error)) *MockCodec_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCodec creates a new instance of MockCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodec {
	mock := &MockCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
