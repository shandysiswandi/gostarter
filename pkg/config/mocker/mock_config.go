// Code generated by mockery. DO NOT EDIT.

package mocker

import mock "github.com/stretchr/testify/mock"

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockConfig) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfig_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConfig_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConfig_Expecter) Close() *MockConfig_Close_Call {
	return &MockConfig_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConfig_Close_Call) Run(run func()) *MockConfig_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_Close_Call) Return(_a0 error) *MockConfig_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_Close_Call) RunAndReturn(run func() error) *MockConfig_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetArray provides a mock function with given fields: key
func (_m *MockConfig) GetArray(key string) []string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetArray")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockConfig_GetArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArray'
type MockConfig_GetArray_Call struct {
	*mock.Call
}

// GetArray is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetArray(key interface{}) *MockConfig_GetArray_Call {
	return &MockConfig_GetArray_Call{Call: _e.mock.On("GetArray", key)}
}

func (_c *MockConfig_GetArray_Call) Run(run func(key string)) *MockConfig_GetArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetArray_Call) Return(_a0 []string) *MockConfig_GetArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetArray_Call) RunAndReturn(run func(string) []string) *MockConfig_GetArray_Call {
	_c.Call.Return(run)
	return _c
}

// GetBinary provides a mock function with given fields: key
func (_m *MockConfig) GetBinary(key string) []byte {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBinary")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockConfig_GetBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBinary'
type MockConfig_GetBinary_Call struct {
	*mock.Call
}

// GetBinary is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetBinary(key interface{}) *MockConfig_GetBinary_Call {
	return &MockConfig_GetBinary_Call{Call: _e.mock.On("GetBinary", key)}
}

func (_c *MockConfig_GetBinary_Call) Run(run func(key string)) *MockConfig_GetBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetBinary_Call) Return(_a0 []byte) *MockConfig_GetBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetBinary_Call) RunAndReturn(run func(string) []byte) *MockConfig_GetBinary_Call {
	_c.Call.Return(run)
	return _c
}

// GetBool provides a mock function with given fields: key
func (_m *MockConfig) GetBool(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConfig_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockConfig_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetBool(key interface{}) *MockConfig_GetBool_Call {
	return &MockConfig_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockConfig_GetBool_Call) Run(run func(key string)) *MockConfig_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetBool_Call) Return(_a0 bool) *MockConfig_GetBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetBool_Call) RunAndReturn(run func(string) bool) *MockConfig_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat provides a mock function with given fields: key
func (_m *MockConfig) GetFloat(key string) float64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockConfig_GetFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat'
type MockConfig_GetFloat_Call struct {
	*mock.Call
}

// GetFloat is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetFloat(key interface{}) *MockConfig_GetFloat_Call {
	return &MockConfig_GetFloat_Call{Call: _e.mock.On("GetFloat", key)}
}

func (_c *MockConfig_GetFloat_Call) Run(run func(key string)) *MockConfig_GetFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetFloat_Call) Return(_a0 float64) *MockConfig_GetFloat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetFloat_Call) RunAndReturn(run func(string) float64) *MockConfig_GetFloat_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: key
func (_m *MockConfig) GetInt(key string) int64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockConfig_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockConfig_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetInt(key interface{}) *MockConfig_GetInt_Call {
	return &MockConfig_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockConfig_GetInt_Call) Run(run func(key string)) *MockConfig_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetInt_Call) Return(_a0 int64) *MockConfig_GetInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetInt_Call) RunAndReturn(run func(string) int64) *MockConfig_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetMap provides a mock function with given fields: key
func (_m *MockConfig) GetMap(key string) map[string]string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMap")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockConfig_GetMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMap'
type MockConfig_GetMap_Call struct {
	*mock.Call
}

// GetMap is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetMap(key interface{}) *MockConfig_GetMap_Call {
	return &MockConfig_GetMap_Call{Call: _e.mock.On("GetMap", key)}
}

func (_c *MockConfig_GetMap_Call) Run(run func(key string)) *MockConfig_GetMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetMap_Call) Return(_a0 map[string]string) *MockConfig_GetMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetMap_Call) RunAndReturn(run func(string) map[string]string) *MockConfig_GetMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *MockConfig) GetString(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfig_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockConfig_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetString(key interface{}) *MockConfig_GetString_Call {
	return &MockConfig_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockConfig_GetString_Call) Run(run func(key string)) *MockConfig_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetString_Call) Return(_a0 string) *MockConfig_GetString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetString_Call) RunAndReturn(run func(string) string) *MockConfig_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
