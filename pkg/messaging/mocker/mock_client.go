// Code generated by mockery. DO NOT EDIT.

package mocker

import (
	context "context"

	messaging "github.com/shandysiswandi/gostarter/pkg/messaging"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// BulkPublish provides a mock function with given fields: ctx, topic, messages
func (_m *MockClient) BulkPublish(ctx context.Context, topic string, messages [][]byte) error {
	ret := _m.Called(ctx, topic, messages)

	if len(ret) == 0 {
		panic("no return value specified for BulkPublish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, [][]byte) error); ok {
		r0 = rf(ctx, topic, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_BulkPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkPublish'
type MockClient_BulkPublish_Call struct {
	*mock.Call
}

// BulkPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - messages [][]byte
func (_e *MockClient_Expecter) BulkPublish(ctx interface{}, topic interface{}, messages interface{}) *MockClient_BulkPublish_Call {
	return &MockClient_BulkPublish_Call{Call: _e.mock.On("BulkPublish", ctx, topic, messages)}
}

func (_c *MockClient_BulkPublish_Call) Run(run func(ctx context.Context, topic string, messages [][]byte)) *MockClient_BulkPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([][]byte))
	})
	return _c
}

func (_c *MockClient_BulkPublish_Call) Return(_a0 error) *MockClient_BulkPublish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_BulkPublish_Call) RunAndReturn(run func(context.Context, string, [][]byte) error) *MockClient_BulkPublish_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return(_a0 error) *MockClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func() error) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, topic, message
func (_m *MockClient) Publish(ctx context.Context, topic string, message []byte) error {
	ret := _m.Called(ctx, topic, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - message []byte
func (_e *MockClient_Expecter) Publish(ctx interface{}, topic interface{}, message interface{}) *MockClient_Publish_Call {
	return &MockClient_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, message)}
}

func (_c *MockClient_Publish_Call) Run(run func(ctx context.Context, topic string, message []byte)) *MockClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockClient_Publish_Call) Return(_a0 error) *MockClient_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Publish_Call) RunAndReturn(run func(context.Context, string, []byte) error) *MockClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, topic, subscriptionID, handler
func (_m *MockClient) Subscribe(ctx context.Context, topic string, subscriptionID string, handler messaging.SubscriberHandlerFunc) (messaging.SubscriptionHandler, error) {
	ret := _m.Called(ctx, topic, subscriptionID, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 messaging.SubscriptionHandler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, messaging.SubscriberHandlerFunc) (messaging.SubscriptionHandler, error)); ok {
		return rf(ctx, topic, subscriptionID, handler)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, messaging.SubscriberHandlerFunc) messaging.SubscriptionHandler); ok {
		r0 = rf(ctx, topic, subscriptionID, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(messaging.SubscriptionHandler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, messaging.SubscriberHandlerFunc) error); ok {
		r1 = rf(ctx, topic, subscriptionID, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - subscriptionID string
//   - handler messaging.SubscriberHandlerFunc
func (_e *MockClient_Expecter) Subscribe(ctx interface{}, topic interface{}, subscriptionID interface{}, handler interface{}) *MockClient_Subscribe_Call {
	return &MockClient_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, topic, subscriptionID, handler)}
}

func (_c *MockClient_Subscribe_Call) Run(run func(ctx context.Context, topic string, subscriptionID string, handler messaging.SubscriberHandlerFunc)) *MockClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(messaging.SubscriberHandlerFunc))
	})
	return _c
}

func (_c *MockClient_Subscribe_Call) Return(_a0 messaging.SubscriptionHandler, _a1 error) *MockClient_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Subscribe_Call) RunAndReturn(run func(context.Context, string, string, messaging.SubscriberHandlerFunc) (messaging.SubscriptionHandler, error)) *MockClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
