// Code generated by mockery. DO NOT EDIT.

package mocker

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockStorage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Close() *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorage_Close_Call) Run(run func()) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return(_a0 error) *MockStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func() error) *MockStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockStorage) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Delete(ctx interface{}, key interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockStorage_Delete_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return(_a0 error) *MockStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: ctx, key
func (_m *MockStorage) Download(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockStorage_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Download(ctx interface{}, key interface{}) *MockStorage_Download_Call {
	return &MockStorage_Download_Call{Call: _e.mock.On("Download", ctx, key)}
}

func (_c *MockStorage_Download_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Download_Call) Return(_a0 []byte, _a1 error) *MockStorage_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Download_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *MockStorage_Download_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, prefix
func (_m *MockStorage) List(ctx context.Context, prefix string) ([]string, error) {
	ret := _m.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockStorage_Expecter) List(ctx interface{}, prefix interface{}) *MockStorage_List_Call {
	return &MockStorage_List_Call{Call: _e.mock.On("List", ctx, prefix)}
}

func (_c *MockStorage_List_Call) Run(run func(ctx context.Context, prefix string)) *MockStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_List_Call) Return(_a0 []string, _a1 error) *MockStorage_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_List_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, key, data
func (_m *MockStorage) Upload(ctx context.Context, key string, data []byte) (string, error) {
	ret := _m.Called(ctx, key, data)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return rf(ctx, key, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, key, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockStorage_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - data []byte
func (_e *MockStorage_Expecter) Upload(ctx interface{}, key interface{}, data interface{}) *MockStorage_Upload_Call {
	return &MockStorage_Upload_Call{Call: _e.mock.On("Upload", ctx, key, data)}
}

func (_c *MockStorage_Upload_Call) Run(run func(ctx context.Context, key string, data []byte)) *MockStorage_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockStorage_Upload_Call) Return(_a0 string, _a1 error) *MockStorage_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Upload_Call) RunAndReturn(run func(context.Context, string, []byte) (string, error)) *MockStorage_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
