// Code generated by mockery. DO NOT EDIT.

package pkgmock

import (
	http "github.com/shandysiswandi/gostarter/pkg/http"
	mock "github.com/stretchr/testify/mock"
)

// MockServeOption is an autogenerated mock type for the ServeOption type
type MockServeOption struct {
	mock.Mock
}

type MockServeOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServeOption) EXPECT() *MockServeOption_Expecter {
	return &MockServeOption_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: s
func (_m *MockServeOption) Apply(s *http.Serve) {
	_m.Called(s)
}

// MockServeOption_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockServeOption_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - s *http.Serve
func (_e *MockServeOption_Expecter) Apply(s interface{}) *MockServeOption_Apply_Call {
	return &MockServeOption_Apply_Call{Call: _e.mock.On("Apply", s)}
}

func (_c *MockServeOption_Apply_Call) Run(run func(s *http.Serve)) *MockServeOption_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Serve))
	})
	return _c
}

func (_c *MockServeOption_Apply_Call) Return() *MockServeOption_Apply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServeOption_Apply_Call) RunAndReturn(run func(*http.Serve)) *MockServeOption_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServeOption creates a new instance of MockServeOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServeOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServeOption {
	mock := &MockServeOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
