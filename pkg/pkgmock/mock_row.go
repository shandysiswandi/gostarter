// Code generated by mockery. DO NOT EDIT.

package pkgmock

import mock "github.com/stretchr/testify/mock"

// MockRow is an autogenerated mock type for the Row type
type MockRow[T interface{}] struct {
	mock.Mock
}

type MockRow_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockRow[T]) EXPECT() *MockRow_Expecter[T] {
	return &MockRow_Expecter[T]{mock: &_m.Mock}
}

// Columns provides a mock function with given fields:
func (_m *MockRow[T]) Columns() []interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Columns")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockRow_Columns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Columns'
type MockRow_Columns_Call[T interface{}] struct {
	*mock.Call
}

// Columns is a helper method to define mock.On call
func (_e *MockRow_Expecter[T]) Columns() *MockRow_Columns_Call[T] {
	return &MockRow_Columns_Call[T]{Call: _e.mock.On("Columns")}
}

func (_c *MockRow_Columns_Call[T]) Run(run func()) *MockRow_Columns_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRow_Columns_Call[T]) Return(_a0 []interface{}) *MockRow_Columns_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRow_Columns_Call[T]) RunAndReturn(run func() []interface{}) *MockRow_Columns_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockRow creates a new instance of MockRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRow[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRow[T] {
	mock := &MockRow[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
