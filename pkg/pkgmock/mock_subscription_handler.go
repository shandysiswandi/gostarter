// Code generated by mockery. DO NOT EDIT.

package pkgmock

import mock "github.com/stretchr/testify/mock"

// MockSubscriptionHandler is an autogenerated mock type for the SubscriptionHandler type
type MockSubscriptionHandler struct {
	mock.Mock
}

type MockSubscriptionHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionHandler) EXPECT() *MockSubscriptionHandler_Expecter {
	return &MockSubscriptionHandler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockSubscriptionHandler) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSubscriptionHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSubscriptionHandler_Expecter) Close() *MockSubscriptionHandler_Close_Call {
	return &MockSubscriptionHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSubscriptionHandler_Close_Call) Run(run func()) *MockSubscriptionHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionHandler_Close_Call) Return(_a0 error) *MockSubscriptionHandler_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionHandler_Close_Call) RunAndReturn(run func() error) *MockSubscriptionHandler_Close_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriptionHandler creates a new instance of MockSubscriptionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionHandler {
	mock := &MockSubscriptionHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
