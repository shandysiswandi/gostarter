// Code generated by mockery. DO NOT EDIT.

package mocker

import (
	jwt "github.com/shandysiswandi/gostarter/pkg/jwt"
	mock "github.com/stretchr/testify/mock"
)

// MockJWT is an autogenerated mock type for the JWT type
type MockJWT struct {
	mock.Mock
}

type MockJWT_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWT) EXPECT() *MockJWT_Expecter {
	return &MockJWT_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: c
func (_m *MockJWT) Generate(c *jwt.Claim) (string, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Claim) (string, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Claim) string); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Claim) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWT_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockJWT_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - c *jwt.Claim
func (_e *MockJWT_Expecter) Generate(c interface{}) *MockJWT_Generate_Call {
	return &MockJWT_Generate_Call{Call: _e.mock.On("Generate", c)}
}

func (_c *MockJWT_Generate_Call) Run(run func(c *jwt.Claim)) *MockJWT_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jwt.Claim))
	})
	return _c
}

func (_c *MockJWT_Generate_Call) Return(_a0 string, _a1 error) *MockJWT_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWT_Generate_Call) RunAndReturn(run func(*jwt.Claim) (string, error)) *MockJWT_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: token
func (_m *MockJWT) Verify(token string) (*jwt.Claim, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *jwt.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Claim, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Claim); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWT_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockJWT_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - token string
func (_e *MockJWT_Expecter) Verify(token interface{}) *MockJWT_Verify_Call {
	return &MockJWT_Verify_Call{Call: _e.mock.On("Verify", token)}
}

func (_c *MockJWT_Verify_Call) Run(run func(token string)) *MockJWT_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWT_Verify_Call) Return(_a0 *jwt.Claim, _a1 error) *MockJWT_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWT_Verify_Call) RunAndReturn(run func(string) (*jwt.Claim, error)) *MockJWT_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWT creates a new instance of MockJWT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWT(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWT {
	mock := &MockJWT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
