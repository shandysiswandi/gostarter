// Code generated by mockery. DO NOT EDIT.

package mocker

import (
	emitter "github.com/shandysiswandi/gostarter/pkg/emitter"
	mock "github.com/stretchr/testify/mock"
)

// MockEmitter is an autogenerated mock type for the Emitter type
type MockEmitter struct {
	mock.Mock
}

type MockEmitter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmitter) EXPECT() *MockEmitter_Expecter {
	return &MockEmitter_Expecter{mock: &_m.Mock}
}

// AddListener provides a mock function with given fields: topic
func (_m *MockEmitter) AddListener(topic string) <-chan emitter.Event {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for AddListener")
	}

	var r0 <-chan emitter.Event
	if rf, ok := ret.Get(0).(func(string) <-chan emitter.Event); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan emitter.Event)
		}
	}

	return r0
}

// MockEmitter_AddListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddListener'
type MockEmitter_AddListener_Call struct {
	*mock.Call
}

// AddListener is a helper method to define mock.On call
//   - topic string
func (_e *MockEmitter_Expecter) AddListener(topic interface{}) *MockEmitter_AddListener_Call {
	return &MockEmitter_AddListener_Call{Call: _e.mock.On("AddListener", topic)}
}

func (_c *MockEmitter_AddListener_Call) Run(run func(topic string)) *MockEmitter_AddListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEmitter_AddListener_Call) Return(_a0 <-chan emitter.Event) *MockEmitter_AddListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmitter_AddListener_Call) RunAndReturn(run func(string) <-chan emitter.Event) *MockEmitter_AddListener_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockEmitter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmitter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockEmitter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockEmitter_Expecter) Close() *MockEmitter_Close_Call {
	return &MockEmitter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockEmitter_Close_Call) Run(run func()) *MockEmitter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEmitter_Close_Call) Return(_a0 error) *MockEmitter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmitter_Close_Call) RunAndReturn(run func() error) *MockEmitter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Emit provides a mock function with given fields: topic, args
func (_m *MockEmitter) Emit(topic string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Emit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(topic, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmitter_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type MockEmitter_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//   - topic string
//   - args ...interface{}
func (_e *MockEmitter_Expecter) Emit(topic interface{}, args ...interface{}) *MockEmitter_Emit_Call {
	return &MockEmitter_Emit_Call{Call: _e.mock.On("Emit",
		append([]interface{}{topic}, args...)...)}
}

func (_c *MockEmitter_Emit_Call) Run(run func(topic string, args ...interface{})) *MockEmitter_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEmitter_Emit_Call) Return(_a0 error) *MockEmitter_Emit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmitter_Emit_Call) RunAndReturn(run func(string, ...interface{}) error) *MockEmitter_Emit_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveListener provides a mock function with given fields: topic, listeners
func (_m *MockEmitter) RemoveListener(topic string, listeners ...<-chan emitter.Event) {
	_va := make([]interface{}, len(listeners))
	for _i := range listeners {
		_va[_i] = listeners[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockEmitter_RemoveListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveListener'
type MockEmitter_RemoveListener_Call struct {
	*mock.Call
}

// RemoveListener is a helper method to define mock.On call
//   - topic string
//   - listeners ...<-chan emitter.Event
func (_e *MockEmitter_Expecter) RemoveListener(topic interface{}, listeners ...interface{}) *MockEmitter_RemoveListener_Call {
	return &MockEmitter_RemoveListener_Call{Call: _e.mock.On("RemoveListener",
		append([]interface{}{topic}, listeners...)...)}
}

func (_c *MockEmitter_RemoveListener_Call) Run(run func(topic string, listeners ...<-chan emitter.Event)) *MockEmitter_RemoveListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]<-chan emitter.Event, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(<-chan emitter.Event)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEmitter_RemoveListener_Call) Return() *MockEmitter_RemoveListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEmitter_RemoveListener_Call) RunAndReturn(run func(string, ...<-chan emitter.Event)) *MockEmitter_RemoveListener_Call {
	_c.Run(run)
	return _c
}

// NewMockEmitter creates a new instance of MockEmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmitter {
	mock := &MockEmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
