// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/payment/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockPaymentTopupStore is an autogenerated mock type for the PaymentTopupStore type
type MockPaymentTopupStore struct {
	mock.Mock
}

type MockPaymentTopupStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentTopupStore) EXPECT() *MockPaymentTopupStore_Expecter {
	return &MockPaymentTopupStore_Expecter{mock: &_m.Mock}
}

// FindAccountByUserID provides a mock function with given fields: ctx, userID
func (_m *MockPaymentTopupStore) FindAccountByUserID(ctx context.Context, userID uint64) (*domain.Account, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAccountByUserID")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*domain.Account, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.Account); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentTopupStore_FindAccountByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAccountByUserID'
type MockPaymentTopupStore_FindAccountByUserID_Call struct {
	*mock.Call
}

// FindAccountByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockPaymentTopupStore_Expecter) FindAccountByUserID(ctx interface{}, userID interface{}) *MockPaymentTopupStore_FindAccountByUserID_Call {
	return &MockPaymentTopupStore_FindAccountByUserID_Call{Call: _e.mock.On("FindAccountByUserID", ctx, userID)}
}

func (_c *MockPaymentTopupStore_FindAccountByUserID_Call) Run(run func(ctx context.Context, userID uint64)) *MockPaymentTopupStore_FindAccountByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockPaymentTopupStore_FindAccountByUserID_Call) Return(_a0 *domain.Account, _a1 error) *MockPaymentTopupStore_FindAccountByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentTopupStore_FindAccountByUserID_Call) RunAndReturn(run func(context.Context, uint64) (*domain.Account, error)) *MockPaymentTopupStore_FindAccountByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// FindTopupByReferenceID provides a mock function with given fields: ctx, refID
func (_m *MockPaymentTopupStore) FindTopupByReferenceID(ctx context.Context, refID string) (*domain.Topup, error) {
	ret := _m.Called(ctx, refID)

	if len(ret) == 0 {
		panic("no return value specified for FindTopupByReferenceID")
	}

	var r0 *domain.Topup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Topup, error)); ok {
		return rf(ctx, refID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Topup); ok {
		r0 = rf(ctx, refID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Topup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentTopupStore_FindTopupByReferenceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTopupByReferenceID'
type MockPaymentTopupStore_FindTopupByReferenceID_Call struct {
	*mock.Call
}

// FindTopupByReferenceID is a helper method to define mock.On call
//   - ctx context.Context
//   - refID string
func (_e *MockPaymentTopupStore_Expecter) FindTopupByReferenceID(ctx interface{}, refID interface{}) *MockPaymentTopupStore_FindTopupByReferenceID_Call {
	return &MockPaymentTopupStore_FindTopupByReferenceID_Call{Call: _e.mock.On("FindTopupByReferenceID", ctx, refID)}
}

func (_c *MockPaymentTopupStore_FindTopupByReferenceID_Call) Run(run func(ctx context.Context, refID string)) *MockPaymentTopupStore_FindTopupByReferenceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentTopupStore_FindTopupByReferenceID_Call) Return(_a0 *domain.Topup, _a1 error) *MockPaymentTopupStore_FindTopupByReferenceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentTopupStore_FindTopupByReferenceID_Call) RunAndReturn(run func(context.Context, string) (*domain.Topup, error)) *MockPaymentTopupStore_FindTopupByReferenceID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTopup provides a mock function with given fields: ctx, topup
func (_m *MockPaymentTopupStore) SaveTopup(ctx context.Context, topup domain.Topup) error {
	ret := _m.Called(ctx, topup)

	if len(ret) == 0 {
		panic("no return value specified for SaveTopup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Topup) error); ok {
		r0 = rf(ctx, topup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentTopupStore_SaveTopup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTopup'
type MockPaymentTopupStore_SaveTopup_Call struct {
	*mock.Call
}

// SaveTopup is a helper method to define mock.On call
//   - ctx context.Context
//   - topup domain.Topup
func (_e *MockPaymentTopupStore_Expecter) SaveTopup(ctx interface{}, topup interface{}) *MockPaymentTopupStore_SaveTopup_Call {
	return &MockPaymentTopupStore_SaveTopup_Call{Call: _e.mock.On("SaveTopup", ctx, topup)}
}

func (_c *MockPaymentTopupStore_SaveTopup_Call) Run(run func(ctx context.Context, topup domain.Topup)) *MockPaymentTopupStore_SaveTopup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Topup))
	})
	return _c
}

func (_c *MockPaymentTopupStore_SaveTopup_Call) Return(_a0 error) *MockPaymentTopupStore_SaveTopup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentTopupStore_SaveTopup_Call) RunAndReturn(run func(context.Context, domain.Topup) error) *MockPaymentTopupStore_SaveTopup_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTransaction provides a mock function with given fields: ctx, topup
func (_m *MockPaymentTopupStore) SaveTransaction(ctx context.Context, topup domain.Transaction) error {
	ret := _m.Called(ctx, topup)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Transaction) error); ok {
		r0 = rf(ctx, topup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentTopupStore_SaveTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTransaction'
type MockPaymentTopupStore_SaveTransaction_Call struct {
	*mock.Call
}

// SaveTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - topup domain.Transaction
func (_e *MockPaymentTopupStore_Expecter) SaveTransaction(ctx interface{}, topup interface{}) *MockPaymentTopupStore_SaveTransaction_Call {
	return &MockPaymentTopupStore_SaveTransaction_Call{Call: _e.mock.On("SaveTransaction", ctx, topup)}
}

func (_c *MockPaymentTopupStore_SaveTransaction_Call) Run(run func(ctx context.Context, topup domain.Transaction)) *MockPaymentTopupStore_SaveTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Transaction))
	})
	return _c
}

func (_c *MockPaymentTopupStore_SaveTransaction_Call) Return(_a0 error) *MockPaymentTopupStore_SaveTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentTopupStore_SaveTransaction_Call) RunAndReturn(run func(context.Context, domain.Transaction) error) *MockPaymentTopupStore_SaveTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: ctx, data
func (_m *MockPaymentTopupStore) UpdateAccount(ctx context.Context, data map[string]any) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]any) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentTopupStore_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type MockPaymentTopupStore_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - data map[string]any
func (_e *MockPaymentTopupStore_Expecter) UpdateAccount(ctx interface{}, data interface{}) *MockPaymentTopupStore_UpdateAccount_Call {
	return &MockPaymentTopupStore_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, data)}
}

func (_c *MockPaymentTopupStore_UpdateAccount_Call) Run(run func(ctx context.Context, data map[string]any)) *MockPaymentTopupStore_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]any))
	})
	return _c
}

func (_c *MockPaymentTopupStore_UpdateAccount_Call) Return(_a0 error) *MockPaymentTopupStore_UpdateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentTopupStore_UpdateAccount_Call) RunAndReturn(run func(context.Context, map[string]any) error) *MockPaymentTopupStore_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentTopupStore creates a new instance of MockPaymentTopupStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentTopupStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentTopupStore {
	mock := &MockPaymentTopupStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
