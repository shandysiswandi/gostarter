// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/auth/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockForgotPasswordStore is an autogenerated mock type for the ForgotPasswordStore type
type MockForgotPasswordStore struct {
	mock.Mock
}

type MockForgotPasswordStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockForgotPasswordStore) EXPECT() *MockForgotPasswordStore_Expecter {
	return &MockForgotPasswordStore_Expecter{mock: &_m.Mock}
}

// PasswordResetByUserID provides a mock function with given fields: ctx, uid
func (_m *MockForgotPasswordStore) PasswordResetByUserID(ctx context.Context, uid uint64) (*domain.PasswordReset, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for PasswordResetByUserID")
	}

	var r0 *domain.PasswordReset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*domain.PasswordReset, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.PasswordReset); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PasswordReset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForgotPasswordStore_PasswordResetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordResetByUserID'
type MockForgotPasswordStore_PasswordResetByUserID_Call struct {
	*mock.Call
}

// PasswordResetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uint64
func (_e *MockForgotPasswordStore_Expecter) PasswordResetByUserID(ctx interface{}, uid interface{}) *MockForgotPasswordStore_PasswordResetByUserID_Call {
	return &MockForgotPasswordStore_PasswordResetByUserID_Call{Call: _e.mock.On("PasswordResetByUserID", ctx, uid)}
}

func (_c *MockForgotPasswordStore_PasswordResetByUserID_Call) Run(run func(ctx context.Context, uid uint64)) *MockForgotPasswordStore_PasswordResetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockForgotPasswordStore_PasswordResetByUserID_Call) Return(_a0 *domain.PasswordReset, _a1 error) *MockForgotPasswordStore_PasswordResetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForgotPasswordStore_PasswordResetByUserID_Call) RunAndReturn(run func(context.Context, uint64) (*domain.PasswordReset, error)) *MockForgotPasswordStore_PasswordResetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// PasswordResetDelete provides a mock function with given fields: ctx, id
func (_m *MockForgotPasswordStore) PasswordResetDelete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for PasswordResetDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockForgotPasswordStore_PasswordResetDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordResetDelete'
type MockForgotPasswordStore_PasswordResetDelete_Call struct {
	*mock.Call
}

// PasswordResetDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockForgotPasswordStore_Expecter) PasswordResetDelete(ctx interface{}, id interface{}) *MockForgotPasswordStore_PasswordResetDelete_Call {
	return &MockForgotPasswordStore_PasswordResetDelete_Call{Call: _e.mock.On("PasswordResetDelete", ctx, id)}
}

func (_c *MockForgotPasswordStore_PasswordResetDelete_Call) Run(run func(ctx context.Context, id uint64)) *MockForgotPasswordStore_PasswordResetDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockForgotPasswordStore_PasswordResetDelete_Call) Return(_a0 error) *MockForgotPasswordStore_PasswordResetDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForgotPasswordStore_PasswordResetDelete_Call) RunAndReturn(run func(context.Context, uint64) error) *MockForgotPasswordStore_PasswordResetDelete_Call {
	_c.Call.Return(run)
	return _c
}

// PasswordResetSave provides a mock function with given fields: ctx, ps
func (_m *MockForgotPasswordStore) PasswordResetSave(ctx context.Context, ps domain.PasswordReset) error {
	ret := _m.Called(ctx, ps)

	if len(ret) == 0 {
		panic("no return value specified for PasswordResetSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PasswordReset) error); ok {
		r0 = rf(ctx, ps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockForgotPasswordStore_PasswordResetSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordResetSave'
type MockForgotPasswordStore_PasswordResetSave_Call struct {
	*mock.Call
}

// PasswordResetSave is a helper method to define mock.On call
//   - ctx context.Context
//   - ps domain.PasswordReset
func (_e *MockForgotPasswordStore_Expecter) PasswordResetSave(ctx interface{}, ps interface{}) *MockForgotPasswordStore_PasswordResetSave_Call {
	return &MockForgotPasswordStore_PasswordResetSave_Call{Call: _e.mock.On("PasswordResetSave", ctx, ps)}
}

func (_c *MockForgotPasswordStore_PasswordResetSave_Call) Run(run func(ctx context.Context, ps domain.PasswordReset)) *MockForgotPasswordStore_PasswordResetSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PasswordReset))
	})
	return _c
}

func (_c *MockForgotPasswordStore_PasswordResetSave_Call) Return(_a0 error) *MockForgotPasswordStore_PasswordResetSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForgotPasswordStore_PasswordResetSave_Call) RunAndReturn(run func(context.Context, domain.PasswordReset) error) *MockForgotPasswordStore_PasswordResetSave_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function with given fields: ctx, email
func (_m *MockForgotPasswordStore) UserByEmail(ctx context.Context, email string) (*domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForgotPasswordStore_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockForgotPasswordStore_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockForgotPasswordStore_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockForgotPasswordStore_UserByEmail_Call {
	return &MockForgotPasswordStore_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockForgotPasswordStore_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockForgotPasswordStore_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockForgotPasswordStore_UserByEmail_Call) Return(_a0 *domain.User, _a1 error) *MockForgotPasswordStore_UserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForgotPasswordStore_UserByEmail_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *MockForgotPasswordStore_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockForgotPasswordStore creates a new instance of MockForgotPasswordStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockForgotPasswordStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockForgotPasswordStore {
	mock := &MockForgotPasswordStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
