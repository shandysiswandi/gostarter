// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/auth/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockForgotPasswordStore is an autogenerated mock type for the ForgotPasswordStore type
type MockForgotPasswordStore struct {
	mock.Mock
}

type MockForgotPasswordStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockForgotPasswordStore) EXPECT() *MockForgotPasswordStore_Expecter {
	return &MockForgotPasswordStore_Expecter{mock: &_m.Mock}
}

// DeletePasswordReset provides a mock function with given fields: ctx, id
func (_m *MockForgotPasswordStore) DeletePasswordReset(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePasswordReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockForgotPasswordStore_DeletePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePasswordReset'
type MockForgotPasswordStore_DeletePasswordReset_Call struct {
	*mock.Call
}

// DeletePasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockForgotPasswordStore_Expecter) DeletePasswordReset(ctx interface{}, id interface{}) *MockForgotPasswordStore_DeletePasswordReset_Call {
	return &MockForgotPasswordStore_DeletePasswordReset_Call{Call: _e.mock.On("DeletePasswordReset", ctx, id)}
}

func (_c *MockForgotPasswordStore_DeletePasswordReset_Call) Run(run func(ctx context.Context, id uint64)) *MockForgotPasswordStore_DeletePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockForgotPasswordStore_DeletePasswordReset_Call) Return(_a0 error) *MockForgotPasswordStore_DeletePasswordReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForgotPasswordStore_DeletePasswordReset_Call) RunAndReturn(run func(context.Context, uint64) error) *MockForgotPasswordStore_DeletePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// FindPasswordResetByUserID provides a mock function with given fields: ctx, uid
func (_m *MockForgotPasswordStore) FindPasswordResetByUserID(ctx context.Context, uid uint64) (*domain.PasswordReset, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for FindPasswordResetByUserID")
	}

	var r0 *domain.PasswordReset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*domain.PasswordReset, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.PasswordReset); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PasswordReset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForgotPasswordStore_FindPasswordResetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPasswordResetByUserID'
type MockForgotPasswordStore_FindPasswordResetByUserID_Call struct {
	*mock.Call
}

// FindPasswordResetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uint64
func (_e *MockForgotPasswordStore_Expecter) FindPasswordResetByUserID(ctx interface{}, uid interface{}) *MockForgotPasswordStore_FindPasswordResetByUserID_Call {
	return &MockForgotPasswordStore_FindPasswordResetByUserID_Call{Call: _e.mock.On("FindPasswordResetByUserID", ctx, uid)}
}

func (_c *MockForgotPasswordStore_FindPasswordResetByUserID_Call) Run(run func(ctx context.Context, uid uint64)) *MockForgotPasswordStore_FindPasswordResetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockForgotPasswordStore_FindPasswordResetByUserID_Call) Return(_a0 *domain.PasswordReset, _a1 error) *MockForgotPasswordStore_FindPasswordResetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForgotPasswordStore_FindPasswordResetByUserID_Call) RunAndReturn(run func(context.Context, uint64) (*domain.PasswordReset, error)) *MockForgotPasswordStore_FindPasswordResetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockForgotPasswordStore) FindUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForgotPasswordStore_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockForgotPasswordStore_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockForgotPasswordStore_Expecter) FindUserByEmail(ctx interface{}, email interface{}) *MockForgotPasswordStore_FindUserByEmail_Call {
	return &MockForgotPasswordStore_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", ctx, email)}
}

func (_c *MockForgotPasswordStore_FindUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockForgotPasswordStore_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockForgotPasswordStore_FindUserByEmail_Call) Return(_a0 *domain.User, _a1 error) *MockForgotPasswordStore_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForgotPasswordStore_FindUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *MockForgotPasswordStore_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SavePasswordReset provides a mock function with given fields: ctx, ps
func (_m *MockForgotPasswordStore) SavePasswordReset(ctx context.Context, ps domain.PasswordReset) error {
	ret := _m.Called(ctx, ps)

	if len(ret) == 0 {
		panic("no return value specified for SavePasswordReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PasswordReset) error); ok {
		r0 = rf(ctx, ps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockForgotPasswordStore_SavePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePasswordReset'
type MockForgotPasswordStore_SavePasswordReset_Call struct {
	*mock.Call
}

// SavePasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - ps domain.PasswordReset
func (_e *MockForgotPasswordStore_Expecter) SavePasswordReset(ctx interface{}, ps interface{}) *MockForgotPasswordStore_SavePasswordReset_Call {
	return &MockForgotPasswordStore_SavePasswordReset_Call{Call: _e.mock.On("SavePasswordReset", ctx, ps)}
}

func (_c *MockForgotPasswordStore_SavePasswordReset_Call) Run(run func(ctx context.Context, ps domain.PasswordReset)) *MockForgotPasswordStore_SavePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PasswordReset))
	})
	return _c
}

func (_c *MockForgotPasswordStore_SavePasswordReset_Call) Return(_a0 error) *MockForgotPasswordStore_SavePasswordReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForgotPasswordStore_SavePasswordReset_Call) RunAndReturn(run func(context.Context, domain.PasswordReset) error) *MockForgotPasswordStore_SavePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockForgotPasswordStore creates a new instance of MockForgotPasswordStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockForgotPasswordStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockForgotPasswordStore {
	mock := &MockForgotPasswordStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
