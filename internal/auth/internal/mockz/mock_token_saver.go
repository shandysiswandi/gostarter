// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/auth/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MocktokenSaver is an autogenerated mock type for the tokenSaver type
type MocktokenSaver struct {
	mock.Mock
}

type MocktokenSaver_Expecter struct {
	mock *mock.Mock
}

func (_m *MocktokenSaver) EXPECT() *MocktokenSaver_Expecter {
	return &MocktokenSaver_Expecter{mock: &_m.Mock}
}

// TokenSave provides a mock function with given fields: ctx, token
func (_m *MocktokenSaver) TokenSave(ctx context.Context, token domain.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for TokenSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocktokenSaver_TokenSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenSave'
type MocktokenSaver_TokenSave_Call struct {
	*mock.Call
}

// TokenSave is a helper method to define mock.On call
//   - ctx context.Context
//   - token domain.Token
func (_e *MocktokenSaver_Expecter) TokenSave(ctx interface{}, token interface{}) *MocktokenSaver_TokenSave_Call {
	return &MocktokenSaver_TokenSave_Call{Call: _e.mock.On("TokenSave", ctx, token)}
}

func (_c *MocktokenSaver_TokenSave_Call) Run(run func(ctx context.Context, token domain.Token)) *MocktokenSaver_TokenSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Token))
	})
	return _c
}

func (_c *MocktokenSaver_TokenSave_Call) Return(_a0 error) *MocktokenSaver_TokenSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocktokenSaver_TokenSave_Call) RunAndReturn(run func(context.Context, domain.Token) error) *MocktokenSaver_TokenSave_Call {
	_c.Call.Return(run)
	return _c
}

// TokenUpdate provides a mock function with given fields: ctx, token
func (_m *MocktokenSaver) TokenUpdate(ctx context.Context, token domain.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for TokenUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocktokenSaver_TokenUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenUpdate'
type MocktokenSaver_TokenUpdate_Call struct {
	*mock.Call
}

// TokenUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - token domain.Token
func (_e *MocktokenSaver_Expecter) TokenUpdate(ctx interface{}, token interface{}) *MocktokenSaver_TokenUpdate_Call {
	return &MocktokenSaver_TokenUpdate_Call{Call: _e.mock.On("TokenUpdate", ctx, token)}
}

func (_c *MocktokenSaver_TokenUpdate_Call) Run(run func(ctx context.Context, token domain.Token)) *MocktokenSaver_TokenUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Token))
	})
	return _c
}

func (_c *MocktokenSaver_TokenUpdate_Call) Return(_a0 error) *MocktokenSaver_TokenUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocktokenSaver_TokenUpdate_Call) RunAndReturn(run func(context.Context, domain.Token) error) *MocktokenSaver_TokenUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocktokenSaver creates a new instance of MocktokenSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocktokenSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocktokenSaver {
	mock := &MocktokenSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
