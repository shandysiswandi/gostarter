// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/auth/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockResetPasswordStore is an autogenerated mock type for the ResetPasswordStore type
type MockResetPasswordStore struct {
	mock.Mock
}

type MockResetPasswordStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResetPasswordStore) EXPECT() *MockResetPasswordStore_Expecter {
	return &MockResetPasswordStore_Expecter{mock: &_m.Mock}
}

// PasswordResetByToken provides a mock function with given fields: ctx, t
func (_m *MockResetPasswordStore) PasswordResetByToken(ctx context.Context, t string) (*domain.PasswordReset, error) {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for PasswordResetByToken")
	}

	var r0 *domain.PasswordReset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.PasswordReset, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.PasswordReset); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PasswordReset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResetPasswordStore_PasswordResetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordResetByToken'
type MockResetPasswordStore_PasswordResetByToken_Call struct {
	*mock.Call
}

// PasswordResetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - t string
func (_e *MockResetPasswordStore_Expecter) PasswordResetByToken(ctx interface{}, t interface{}) *MockResetPasswordStore_PasswordResetByToken_Call {
	return &MockResetPasswordStore_PasswordResetByToken_Call{Call: _e.mock.On("PasswordResetByToken", ctx, t)}
}

func (_c *MockResetPasswordStore_PasswordResetByToken_Call) Run(run func(ctx context.Context, t string)) *MockResetPasswordStore_PasswordResetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResetPasswordStore_PasswordResetByToken_Call) Return(_a0 *domain.PasswordReset, _a1 error) *MockResetPasswordStore_PasswordResetByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResetPasswordStore_PasswordResetByToken_Call) RunAndReturn(run func(context.Context, string) (*domain.PasswordReset, error)) *MockResetPasswordStore_PasswordResetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// PasswordResetDelete provides a mock function with given fields: ctx, id
func (_m *MockResetPasswordStore) PasswordResetDelete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for PasswordResetDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResetPasswordStore_PasswordResetDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordResetDelete'
type MockResetPasswordStore_PasswordResetDelete_Call struct {
	*mock.Call
}

// PasswordResetDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockResetPasswordStore_Expecter) PasswordResetDelete(ctx interface{}, id interface{}) *MockResetPasswordStore_PasswordResetDelete_Call {
	return &MockResetPasswordStore_PasswordResetDelete_Call{Call: _e.mock.On("PasswordResetDelete", ctx, id)}
}

func (_c *MockResetPasswordStore_PasswordResetDelete_Call) Run(run func(ctx context.Context, id uint64)) *MockResetPasswordStore_PasswordResetDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockResetPasswordStore_PasswordResetDelete_Call) Return(_a0 error) *MockResetPasswordStore_PasswordResetDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResetPasswordStore_PasswordResetDelete_Call) RunAndReturn(run func(context.Context, uint64) error) *MockResetPasswordStore_PasswordResetDelete_Call {
	_c.Call.Return(run)
	return _c
}

// UserUpdatePassword provides a mock function with given fields: ctx, id, pass
func (_m *MockResetPasswordStore) UserUpdatePassword(ctx context.Context, id uint64, pass string) error {
	ret := _m.Called(ctx, id, pass)

	if len(ret) == 0 {
		panic("no return value specified for UserUpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) error); ok {
		r0 = rf(ctx, id, pass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResetPasswordStore_UserUpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserUpdatePassword'
type MockResetPasswordStore_UserUpdatePassword_Call struct {
	*mock.Call
}

// UserUpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
//   - pass string
func (_e *MockResetPasswordStore_Expecter) UserUpdatePassword(ctx interface{}, id interface{}, pass interface{}) *MockResetPasswordStore_UserUpdatePassword_Call {
	return &MockResetPasswordStore_UserUpdatePassword_Call{Call: _e.mock.On("UserUpdatePassword", ctx, id, pass)}
}

func (_c *MockResetPasswordStore_UserUpdatePassword_Call) Run(run func(ctx context.Context, id uint64, pass string)) *MockResetPasswordStore_UserUpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(string))
	})
	return _c
}

func (_c *MockResetPasswordStore_UserUpdatePassword_Call) Return(_a0 error) *MockResetPasswordStore_UserUpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResetPasswordStore_UserUpdatePassword_Call) RunAndReturn(run func(context.Context, uint64, string) error) *MockResetPasswordStore_UserUpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResetPasswordStore creates a new instance of MockResetPasswordStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResetPasswordStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResetPasswordStore {
	mock := &MockResetPasswordStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
