// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/auth/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockLoginStore is an autogenerated mock type for the LoginStore type
type MockLoginStore struct {
	mock.Mock
}

type MockLoginStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginStore) EXPECT() *MockLoginStore_Expecter {
	return &MockLoginStore_Expecter{mock: &_m.Mock}
}

// TokenByUserID provides a mock function with given fields: ctx, uid
func (_m *MockLoginStore) TokenByUserID(ctx context.Context, uid uint64) (*domain.Token, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for TokenByUserID")
	}

	var r0 *domain.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*domain.Token, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.Token); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoginStore_TokenByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenByUserID'
type MockLoginStore_TokenByUserID_Call struct {
	*mock.Call
}

// TokenByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uint64
func (_e *MockLoginStore_Expecter) TokenByUserID(ctx interface{}, uid interface{}) *MockLoginStore_TokenByUserID_Call {
	return &MockLoginStore_TokenByUserID_Call{Call: _e.mock.On("TokenByUserID", ctx, uid)}
}

func (_c *MockLoginStore_TokenByUserID_Call) Run(run func(ctx context.Context, uid uint64)) *MockLoginStore_TokenByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockLoginStore_TokenByUserID_Call) Return(_a0 *domain.Token, _a1 error) *MockLoginStore_TokenByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoginStore_TokenByUserID_Call) RunAndReturn(run func(context.Context, uint64) (*domain.Token, error)) *MockLoginStore_TokenByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// TokenSave provides a mock function with given fields: ctx, token
func (_m *MockLoginStore) TokenSave(ctx context.Context, token domain.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for TokenSave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoginStore_TokenSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenSave'
type MockLoginStore_TokenSave_Call struct {
	*mock.Call
}

// TokenSave is a helper method to define mock.On call
//   - ctx context.Context
//   - token domain.Token
func (_e *MockLoginStore_Expecter) TokenSave(ctx interface{}, token interface{}) *MockLoginStore_TokenSave_Call {
	return &MockLoginStore_TokenSave_Call{Call: _e.mock.On("TokenSave", ctx, token)}
}

func (_c *MockLoginStore_TokenSave_Call) Run(run func(ctx context.Context, token domain.Token)) *MockLoginStore_TokenSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Token))
	})
	return _c
}

func (_c *MockLoginStore_TokenSave_Call) Return(_a0 error) *MockLoginStore_TokenSave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoginStore_TokenSave_Call) RunAndReturn(run func(context.Context, domain.Token) error) *MockLoginStore_TokenSave_Call {
	_c.Call.Return(run)
	return _c
}

// TokenUpdate provides a mock function with given fields: ctx, token
func (_m *MockLoginStore) TokenUpdate(ctx context.Context, token domain.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for TokenUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoginStore_TokenUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenUpdate'
type MockLoginStore_TokenUpdate_Call struct {
	*mock.Call
}

// TokenUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - token domain.Token
func (_e *MockLoginStore_Expecter) TokenUpdate(ctx interface{}, token interface{}) *MockLoginStore_TokenUpdate_Call {
	return &MockLoginStore_TokenUpdate_Call{Call: _e.mock.On("TokenUpdate", ctx, token)}
}

func (_c *MockLoginStore_TokenUpdate_Call) Run(run func(ctx context.Context, token domain.Token)) *MockLoginStore_TokenUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Token))
	})
	return _c
}

func (_c *MockLoginStore_TokenUpdate_Call) Return(_a0 error) *MockLoginStore_TokenUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoginStore_TokenUpdate_Call) RunAndReturn(run func(context.Context, domain.Token) error) *MockLoginStore_TokenUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function with given fields: ctx, email
func (_m *MockLoginStore) UserByEmail(ctx context.Context, email string) (*domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoginStore_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockLoginStore_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockLoginStore_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockLoginStore_UserByEmail_Call {
	return &MockLoginStore_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockLoginStore_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockLoginStore_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLoginStore_UserByEmail_Call) Return(_a0 *domain.User, _a1 error) *MockLoginStore_UserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoginStore_UserByEmail_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *MockLoginStore_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoginStore creates a new instance of MockLoginStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginStore {
	mock := &MockLoginStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
