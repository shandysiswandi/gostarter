// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/gallery/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockUpload is an autogenerated mock type for the Upload type
type MockUpload struct {
	mock.Mock
}

type MockUpload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpload) EXPECT() *MockUpload_Expecter {
	return &MockUpload_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: ctx, in
func (_m *MockUpload) Call(ctx context.Context, in domain.UploadInput) (*domain.UploadOutput, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 *domain.UploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UploadInput) (*domain.UploadOutput, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UploadInput) *domain.UploadOutput); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UploadInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpload_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockUpload_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - ctx context.Context
//   - in domain.UploadInput
func (_e *MockUpload_Expecter) Call(ctx interface{}, in interface{}) *MockUpload_Call_Call {
	return &MockUpload_Call_Call{Call: _e.mock.On("Call", ctx, in)}
}

func (_c *MockUpload_Call_Call) Run(run func(ctx context.Context, in domain.UploadInput)) *MockUpload_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UploadInput))
	})
	return _c
}

func (_c *MockUpload_Call_Call) Return(_a0 *domain.UploadOutput, _a1 error) *MockUpload_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpload_Call_Call) RunAndReturn(run func(context.Context, domain.UploadInput) (*domain.UploadOutput, error)) *MockUpload_Call_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpload creates a new instance of MockUpload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpload {
	mock := &MockUpload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
