// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/region/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockSearchStore is an autogenerated mock type for the SearchStore type
type MockSearchStore struct {
	mock.Mock
}

type MockSearchStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchStore) EXPECT() *MockSearchStore_Expecter {
	return &MockSearchStore_Expecter{mock: &_m.Mock}
}

// Cities provides a mock function with given fields: ctx, parentID, ids
func (_m *MockSearchStore) Cities(ctx context.Context, parentID string, ids ...string) ([]domain.City, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, parentID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Cities")
	}

	var r0 []domain.City
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) ([]domain.City, error)); ok {
		return rf(ctx, parentID, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) []domain.City); ok {
		r0 = rf(ctx, parentID, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.City)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, parentID, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSearchStore_Cities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cities'
type MockSearchStore_Cities_Call struct {
	*mock.Call
}

// Cities is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID string
//   - ids ...string
func (_e *MockSearchStore_Expecter) Cities(ctx interface{}, parentID interface{}, ids ...interface{}) *MockSearchStore_Cities_Call {
	return &MockSearchStore_Cities_Call{Call: _e.mock.On("Cities",
		append([]interface{}{ctx, parentID}, ids...)...)}
}

func (_c *MockSearchStore_Cities_Call) Run(run func(ctx context.Context, parentID string, ids ...string)) *MockSearchStore_Cities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSearchStore_Cities_Call) Return(_a0 []domain.City, _a1 error) *MockSearchStore_Cities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSearchStore_Cities_Call) RunAndReturn(run func(context.Context, string, ...string) ([]domain.City, error)) *MockSearchStore_Cities_Call {
	_c.Call.Return(run)
	return _c
}

// Districts provides a mock function with given fields: ctx, parentID, ids
func (_m *MockSearchStore) Districts(ctx context.Context, parentID string, ids ...string) ([]domain.District, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, parentID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Districts")
	}

	var r0 []domain.District
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) ([]domain.District, error)); ok {
		return rf(ctx, parentID, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) []domain.District); ok {
		r0 = rf(ctx, parentID, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.District)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, parentID, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSearchStore_Districts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Districts'
type MockSearchStore_Districts_Call struct {
	*mock.Call
}

// Districts is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID string
//   - ids ...string
func (_e *MockSearchStore_Expecter) Districts(ctx interface{}, parentID interface{}, ids ...interface{}) *MockSearchStore_Districts_Call {
	return &MockSearchStore_Districts_Call{Call: _e.mock.On("Districts",
		append([]interface{}{ctx, parentID}, ids...)...)}
}

func (_c *MockSearchStore_Districts_Call) Run(run func(ctx context.Context, parentID string, ids ...string)) *MockSearchStore_Districts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSearchStore_Districts_Call) Return(_a0 []domain.District, _a1 error) *MockSearchStore_Districts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSearchStore_Districts_Call) RunAndReturn(run func(context.Context, string, ...string) ([]domain.District, error)) *MockSearchStore_Districts_Call {
	_c.Call.Return(run)
	return _c
}

// Provinces provides a mock function with given fields: ctx, ids
func (_m *MockSearchStore) Provinces(ctx context.Context, ids ...string) ([]domain.Province, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Provinces")
	}

	var r0 []domain.Province
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) ([]domain.Province, error)); ok {
		return rf(ctx, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []domain.Province); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Province)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSearchStore_Provinces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provinces'
type MockSearchStore_Provinces_Call struct {
	*mock.Call
}

// Provinces is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...string
func (_e *MockSearchStore_Expecter) Provinces(ctx interface{}, ids ...interface{}) *MockSearchStore_Provinces_Call {
	return &MockSearchStore_Provinces_Call{Call: _e.mock.On("Provinces",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockSearchStore_Provinces_Call) Run(run func(ctx context.Context, ids ...string)) *MockSearchStore_Provinces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockSearchStore_Provinces_Call) Return(_a0 []domain.Province, _a1 error) *MockSearchStore_Provinces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSearchStore_Provinces_Call) RunAndReturn(run func(context.Context, ...string) ([]domain.Province, error)) *MockSearchStore_Provinces_Call {
	_c.Call.Return(run)
	return _c
}

// Villages provides a mock function with given fields: ctx, parentID, ids
func (_m *MockSearchStore) Villages(ctx context.Context, parentID string, ids ...string) ([]domain.Village, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, parentID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Villages")
	}

	var r0 []domain.Village
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) ([]domain.Village, error)); ok {
		return rf(ctx, parentID, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) []domain.Village); ok {
		r0 = rf(ctx, parentID, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Village)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, parentID, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSearchStore_Villages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Villages'
type MockSearchStore_Villages_Call struct {
	*mock.Call
}

// Villages is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID string
//   - ids ...string
func (_e *MockSearchStore_Expecter) Villages(ctx interface{}, parentID interface{}, ids ...interface{}) *MockSearchStore_Villages_Call {
	return &MockSearchStore_Villages_Call{Call: _e.mock.On("Villages",
		append([]interface{}{ctx, parentID}, ids...)...)}
}

func (_c *MockSearchStore_Villages_Call) Run(run func(ctx context.Context, parentID string, ids ...string)) *MockSearchStore_Villages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSearchStore_Villages_Call) Return(_a0 []domain.Village, _a1 error) *MockSearchStore_Villages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSearchStore_Villages_Call) RunAndReturn(run func(context.Context, string, ...string) ([]domain.Village, error)) *MockSearchStore_Villages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchStore creates a new instance of MockSearchStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchStore {
	mock := &MockSearchStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
