// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	usecase "github.com/shandysiswandi/gostarter/internal/region/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MockSearch is an autogenerated mock type for the Search type
type MockSearch struct {
	mock.Mock
}

type MockSearch_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearch) EXPECT() *MockSearch_Expecter {
	return &MockSearch_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, in
func (_m *MockSearch) Execute(ctx context.Context, in usecase.SearchInput) (*usecase.SearchOutput, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *usecase.SearchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SearchInput) (*usecase.SearchOutput, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SearchInput) *usecase.SearchOutput); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.SearchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.SearchInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSearch_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSearch_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - in usecase.SearchInput
func (_e *MockSearch_Expecter) Execute(ctx interface{}, in interface{}) *MockSearch_Execute_Call {
	return &MockSearch_Execute_Call{Call: _e.mock.On("Execute", ctx, in)}
}

func (_c *MockSearch_Execute_Call) Run(run func(ctx context.Context, in usecase.SearchInput)) *MockSearch_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.SearchInput))
	})
	return _c
}

func (_c *MockSearch_Execute_Call) Return(_a0 *usecase.SearchOutput, _a1 error) *MockSearch_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSearch_Execute_Call) RunAndReturn(run func(context.Context, usecase.SearchInput) (*usecase.SearchOutput, error)) *MockSearch_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearch creates a new instance of MockSearch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearch {
	mock := &MockSearch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
