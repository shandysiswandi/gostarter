// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDeleteStore is an autogenerated mock type for the DeleteStore type
type MockDeleteStore struct {
	mock.Mock
}

type MockDeleteStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeleteStore) EXPECT() *MockDeleteStore_Expecter {
	return &MockDeleteStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, in
func (_m *MockDeleteStore) Delete(ctx context.Context, in uint64) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeleteStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDeleteStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in uint64
func (_e *MockDeleteStore_Expecter) Delete(ctx interface{}, in interface{}) *MockDeleteStore_Delete_Call {
	return &MockDeleteStore_Delete_Call{Call: _e.mock.On("Delete", ctx, in)}
}

func (_c *MockDeleteStore_Delete_Call) Run(run func(ctx context.Context, in uint64)) *MockDeleteStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockDeleteStore_Delete_Call) Return(_a0 error) *MockDeleteStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeleteStore_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *MockDeleteStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeleteStore creates a new instance of MockDeleteStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeleteStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeleteStore {
	mock := &MockDeleteStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
