// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	entity "github.com/shandysiswandi/gostarter/internal/todo/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockGetByIDStore is an autogenerated mock type for the GetByIDStore type
type MockGetByIDStore struct {
	mock.Mock
}

type MockGetByIDStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetByIDStore) EXPECT() *MockGetByIDStore_Expecter {
	return &MockGetByIDStore_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockGetByIDStore) GetByID(ctx context.Context, id uint64) (*entity.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*entity.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *entity.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetByIDStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockGetByIDStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockGetByIDStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockGetByIDStore_GetByID_Call {
	return &MockGetByIDStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockGetByIDStore_GetByID_Call) Run(run func(ctx context.Context, id uint64)) *MockGetByIDStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockGetByIDStore_GetByID_Call) Return(_a0 *entity.Todo, _a1 error) *MockGetByIDStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetByIDStore_GetByID_Call) RunAndReturn(run func(context.Context, uint64) (*entity.Todo, error)) *MockGetByIDStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetByIDStore creates a new instance of MockGetByIDStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetByIDStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetByIDStore {
	mock := &MockGetByIDStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
