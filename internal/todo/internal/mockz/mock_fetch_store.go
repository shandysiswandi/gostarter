// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/todo/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockFetchStore is an autogenerated mock type for the FetchStore type
type MockFetchStore struct {
	mock.Mock
}

type MockFetchStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFetchStore) EXPECT() *MockFetchStore_Expecter {
	return &MockFetchStore_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields: ctx, filter
func (_m *MockFetchStore) Fetch(ctx context.Context, filter map[string]any) ([]domain.Todo, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]any) ([]domain.Todo, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]any) []domain.Todo); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]any) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFetchStore_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockFetchStore_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]any
func (_e *MockFetchStore_Expecter) Fetch(ctx interface{}, filter interface{}) *MockFetchStore_Fetch_Call {
	return &MockFetchStore_Fetch_Call{Call: _e.mock.On("Fetch", ctx, filter)}
}

func (_c *MockFetchStore_Fetch_Call) Run(run func(ctx context.Context, filter map[string]any)) *MockFetchStore_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]any))
	})
	return _c
}

func (_c *MockFetchStore_Fetch_Call) Return(_a0 []domain.Todo, _a1 error) *MockFetchStore_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFetchStore_Fetch_Call) RunAndReturn(run func(context.Context, map[string]any) ([]domain.Todo, error)) *MockFetchStore_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFetchStore creates a new instance of MockFetchStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFetchStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFetchStore {
	mock := &MockFetchStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
