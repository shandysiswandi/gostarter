// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/todo/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockFindStore is an autogenerated mock type for the FindStore type
type MockFindStore struct {
	mock.Mock
}

type MockFindStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFindStore) EXPECT() *MockFindStore_Expecter {
	return &MockFindStore_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, id
func (_m *MockFindStore) Find(ctx context.Context, id uint64) (*domain.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*domain.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFindStore_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockFindStore_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockFindStore_Expecter) Find(ctx interface{}, id interface{}) *MockFindStore_Find_Call {
	return &MockFindStore_Find_Call{Call: _e.mock.On("Find", ctx, id)}
}

func (_c *MockFindStore_Find_Call) Run(run func(ctx context.Context, id uint64)) *MockFindStore_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockFindStore_Find_Call) Return(_a0 *domain.Todo, _a1 error) *MockFindStore_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFindStore_Find_Call) RunAndReturn(run func(context.Context, uint64) (*domain.Todo, error)) *MockFindStore_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFindStore creates a new instance of MockFindStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFindStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFindStore {
	mock := &MockFindStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
