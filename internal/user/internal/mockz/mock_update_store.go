// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUpdateStore is an autogenerated mock type for the UpdateStore type
type MockUpdateStore struct {
	mock.Mock
}

type MockUpdateStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateStore) EXPECT() *MockUpdateStore_Expecter {
	return &MockUpdateStore_Expecter{mock: &_m.Mock}
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUpdateStore) Update(ctx context.Context, user map[string]interface{}) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUpdateStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUpdateStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user map[string]interface{}
func (_e *MockUpdateStore_Expecter) Update(ctx interface{}, user interface{}) *MockUpdateStore_Update_Call {
	return &MockUpdateStore_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUpdateStore_Update_Call) Run(run func(ctx context.Context, user map[string]interface{})) *MockUpdateStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockUpdateStore_Update_Call) Return(_a0 error) *MockUpdateStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdateStore_Update_Call) RunAndReturn(run func(context.Context, map[string]interface{}) error) *MockUpdateStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateStore creates a new instance of MockUpdateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateStore {
	mock := &MockUpdateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
