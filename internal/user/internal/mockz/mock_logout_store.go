// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLogoutStore is an autogenerated mock type for the LogoutStore type
type MockLogoutStore struct {
	mock.Mock
}

type MockLogoutStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogoutStore) EXPECT() *MockLogoutStore_Expecter {
	return &MockLogoutStore_Expecter{mock: &_m.Mock}
}

// DeleteTokenByAccess provides a mock function with given fields: ctx, token
func (_m *MockLogoutStore) DeleteTokenByAccess(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTokenByAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogoutStore_DeleteTokenByAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTokenByAccess'
type MockLogoutStore_DeleteTokenByAccess_Call struct {
	*mock.Call
}

// DeleteTokenByAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockLogoutStore_Expecter) DeleteTokenByAccess(ctx interface{}, token interface{}) *MockLogoutStore_DeleteTokenByAccess_Call {
	return &MockLogoutStore_DeleteTokenByAccess_Call{Call: _e.mock.On("DeleteTokenByAccess", ctx, token)}
}

func (_c *MockLogoutStore_DeleteTokenByAccess_Call) Run(run func(ctx context.Context, token string)) *MockLogoutStore_DeleteTokenByAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLogoutStore_DeleteTokenByAccess_Call) Return(_a0 error) *MockLogoutStore_DeleteTokenByAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogoutStore_DeleteTokenByAccess_Call) RunAndReturn(run func(context.Context, string) error) *MockLogoutStore_DeleteTokenByAccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogoutStore creates a new instance of MockLogoutStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogoutStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogoutStore {
	mock := &MockLogoutStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
