// Code generated by mockery. DO NOT EDIT.

package mockz

import (
	context "context"

	domain "github.com/shandysiswandi/gostarter/internal/user/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockUpdate is an autogenerated mock type for the Update type
type MockUpdate struct {
	mock.Mock
}

type MockUpdate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdate) EXPECT() *MockUpdate_Expecter {
	return &MockUpdate_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: ctx, in
func (_m *MockUpdate) Call(ctx context.Context, in domain.UpdateInput) (*domain.User, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateInput) (*domain.User, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateInput) *domain.User); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UpdateInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdate_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockUpdate_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - ctx context.Context
//   - in domain.UpdateInput
func (_e *MockUpdate_Expecter) Call(ctx interface{}, in interface{}) *MockUpdate_Call_Call {
	return &MockUpdate_Call_Call{Call: _e.mock.On("Call", ctx, in)}
}

func (_c *MockUpdate_Call_Call) Run(run func(ctx context.Context, in domain.UpdateInput)) *MockUpdate_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UpdateInput))
	})
	return _c
}

func (_c *MockUpdate_Call_Call) Return(_a0 *domain.User, _a1 error) *MockUpdate_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdate_Call_Call) RunAndReturn(run func(context.Context, domain.UpdateInput) (*domain.User, error)) *MockUpdate_Call_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdate creates a new instance of MockUpdate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdate {
	mock := &MockUpdate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
