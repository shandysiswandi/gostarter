name: Go CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.19"]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go modules
        id: cache-go-mod
        uses: actions/cache@v4
        with:
          path: |
            chmod -R +w ~/go/pkg/mod
            chmod -R +w ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          sudo mv ./bin/golangci-lint /usr/local/bin/golangci-lint

      - name: Cache Linter
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint

      - name: Run Linter
        run: golangci-lint run

      - name: Run tests and validate coverage
        env:
          COVERAGE_THRESHOLD: 80 # Change as needed
        run: |
          go test ./... -coverprofile=coverage.out
          go tool cover -func=coverage.out -o=coverage.txt

          # Check the coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" |bc -l) )); then
            echo "Coverage ($COVERAGE%) is below the threshold ($COVERAGE_THRESHOLD%)."
            exit 1
          fi

      - name: Build Golang Binary
        run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server .

      - name: Build Docker image
        run: docker build --build-arg TZ="Asia/Jakarta" -t gostarter .

      - name: Create configuration file
        run: |
          mkdir -p ${{ github.workspace }}/config
          cat <<EOF > ${{ github.workspace }}/config/config.yaml
          server.address.http: localhost:8081
          server.address.grpc: localhost:50001

          database.user: ${{ secrets.MYSQL_USER }}
          database.pass: ${{ secrets.MYSQL_PASSWORD }}
          database.host: mysql
          database.port: 3306
          database.name: ${{ secrets.MYSQL_DATABASE }}
          database.max.open: 10
          database.max.idle: 10
          database.max.lifetime: 5

          redis.addr: redis:6379

          feature.flag.graphql.playground: false
          EOF

      - name: Run Docker container
        run: |
          docker run -d --name gostarter-container \
            -p 8081:8081 \
            -p 50001:50001 \
            -v /config/config.yaml:/app/config/config.yaml \
            gostarter

      - name: Test HTTP and gRPC services
        run: |
          curl --fail http://localhost:8081/ || exit 1
          # Ensure you have grpcurl installed; install if needed
          grpcurl -plaintext localhost:50001 describe || exit 1

      - name: Stop and remove Docker container
        run: |
          docker stop gostarter-container
          docker rm gostarter-container
