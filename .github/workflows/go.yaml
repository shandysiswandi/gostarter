name: Go CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.19"

      - name: Clear Go modules cache directory
        run: |
          sudo rm -rf ~/go/pkg/mod
          sudo rm -rf ~/.cache/go-build

      - name: Cache Go modules
        id: cache-go-mod
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          sudo mv ./bin/golangci-lint /usr/local/bin/golangci-lint

      - name: Cache Linter
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint

      - name: Run Linter
        run: golangci-lint run

      - name: Run tests and validate coverage
        env:
          COVERAGE_THRESHOLD: 80 # Change as needed
        run: |
          go test ./... -coverprofile=coverage.out -parallel 4
          go tool cover -func=coverage.out -o=coverage.txt

          # Check the coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" |bc -l) )); then
            echo "Coverage ($COVERAGE%) is below the threshold ($COVERAGE_THRESHOLD%)."
            exit 1
          fi

      - name: Build
        run: go build -v ./...
