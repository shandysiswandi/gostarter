name: Go CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        go: ["1.23"]

    services:
      postgres:
        image: postgres:17-alpine
        options: >-
          --health-cmd="pg_isready --username=user --dbname=gostarter" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: gostarter
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0-debian
        options: >-
          --health-cmd="mysqladmin ping --silent -uuser -ppassword" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: gostarter
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306

      redis:
        image: redis:7.4-alpine
        options: >-
          --health-cmd="redis-cli ping" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go modules
        id: cache-go-mod
        uses: actions/cache@v4
        with:
          path: |
            chmod -R +w ~/go/pkg/mod
            chmod -R +w ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          sudo mv ./bin/golangci-lint /usr/local/bin/golangci-lint

      - name: Cache Linter
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint

      - name: Run Linter
        run: golangci-lint run

      - name: Run tests and validate coverage
        env:
          COVERAGE_THRESHOLD: 80 # Change as needed
          TZ: "Asia/Jakarta"
          PUBSUB_EMULATOR_HOST: localhost:8085
        run: |
          go test $(go list ./pkg/... ./internal/... | grep -vE '/mocker|/mockz|/pkg/goerror/pb|/app') -coverprofile=coverage.out -race

          # Check the coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" |bc -l) )); then
            echo "Coverage ($COVERAGE%) is below the threshold ($COVERAGE_THRESHOLD%)."
            exit 1
          fi

      - name: Build Binary and Run
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server .
          ./server & # Run the app in the background
          APP_PID=$!

          # Ensure app is running
          if ! ps -p $APP_PID > /dev/null; then
            echo "App failed to start."
            exit 1
          fi

      - name: Test HTTP
        run: |
          curl --fail -X POST http://localhost:8081/auth/login || exit 1
