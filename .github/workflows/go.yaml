name: Go CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        go: ["1.23"]

    steps:
      - name: Install MySQL, Postgres and Redis Manually
        run: |
          sudo systemctl start postgresql.service
          sudo systemctl start mysql.service
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo service redis-server start
          redis-cli ping
        continue-on-error: false

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go modules
        id: cache-go-mod
        uses: actions/cache@v4
        with:
          path: |
            chmod -R +w ~/go/pkg/mod
            chmod -R +w ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          sudo mv ./bin/golangci-lint /usr/local/bin/golangci-lint

      - name: Cache Linter
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/golangci-lint
          key: ${{ runner.os }}-golangci-lint

      - name: Run Linter
        run: golangci-lint run

      - name: Run tests and validate coverage
        env:
          COVERAGE_THRESHOLD: 80 # Change as needed
          TZ: "Asia/Jakarta"
          PUBSUB_EMULATOR_HOST: localhost:8085
        run: |
          go test $(go list ./pkg/... ./internal/... | grep -vE '/mocker|/mockz|/pkg/goerror/pb|/app') -coverprofile=coverage.out -race

          # Check the coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" |bc -l) )); then
            echo "Coverage ($COVERAGE%) is below the threshold ($COVERAGE_THRESHOLD%)."
            exit 1
          fi

      - name: Create configuration file
        run: |
          mkdir -p ${{ github.workspace }}/config
          cat <<EOF > ${{ github.workspace }}/config/config.yaml
          server.address.http: localhost:8081
          server.address.gql: localhost:8082
          server.address.grpc: localhost:50001

          telemetry.name: gostarter
          telemetry.otlp.grpc.address: localhost:4317
          telemetry.otlp.http.address: localhost:4318

          tz: "Asia/Jakarta"

          pubsub.project.id: pubsub-dev

          database.driver: mysql
          database.user: root
          database.pass: root
          database.host: localhost
          database.port: 3306
          database.name: gostarter
          database.max.open: 10
          database.max.idle: 10
          database.max.lifetime: 5

          redis.addr: localhost:6379

          jwt.public.key: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTTZxb29TUm9KekFIeXJOTkw0TXdGcVNWRHYvNDJ3WVF4TnpBZUMrbGpTVnMyUWlnK0wrRHdtanpjUG4wOXpGWnRvNWN3dWFQdkZlNnJvTVkyRTUyYjhDQXdFQUFRPT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t
          jwt.private.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCVkFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0FUNHdnZ0U2QWdFQUFrRUF6cXFpaEpHZ25NQWZLczAwdmd6QVdwSlVPLy9qYkJoREUzTUI0TDZXTkpXelpDS0Q0djRQQ2FQTncrZlQzTVZtMmpsekM1bys4VjdxdWd4allUblp2d0lEQVFBQkFrQVh5VTN4UWkyaFBQK1pWb3NHZ01NMjZYYW1mVG80dThZa20rMFFaLzh6eC80S0F6TWMyZ3hZVk5UYVVDL1Vjc3ZyVTVrL3lpemgxeUtsb1lxejc2OXBBaUVBOTJtcVlObk93T2pBKzgvRmJwUFhGZ1dpWDFvbUJCcUhuTTR3cVN3dE16MENJUURWMXUxa0dEK0ZiNHpRSm1WMEtaV05yYTNETFdKSmtXK0pmZVB0NFRVZ3F3SWhBSUtwZ0R5RDZ1Z0FSQ0w0bUlrTWROUUJoNzRaeXVmeDV0ck9IZTdLRU5qMUFpQStRS2ExZUJXdCsrNkxmbElVd2pKbW40UXhpTm5QUHdhd2lUUzh3TTVkcHdJZ1lMTHVhTkpwd2pCRmJLOVFKRi9VRjJHR28xL0duVGlSQmtoNy96THRLK3c9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
          secret.hash.sha256: secret

          init.flag.messaging: false

          feature.flag.graphql.playground: false
          feature.flag.todo.job: false

          module.flag.auth: true
          module.flag.user: true
          module.flag.todo: true
          EOF

      - name: Build Binary and Run
        env:
          LOCAL: true
          DB_USR: root
          DB_PWD: root
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server .

          ./server & # Run the app in the background
          APP_PID=$!

          # Ensure app is running
          if ! ps -p $APP_PID > /dev/null; then
            echo "App failed to start."
            exit 1
          fi

      - name: Test HTTP
        run: |
          curl --fail -X POST http://localhost:8081/auth/login || exit 1
