// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package todo

import (
	"fmt"
	"io"
	"strconv"
)

type CreateInput struct {
	Title       string `json:"title"`
	Description string `json:"description"`
}

type FetchInput struct {
	ID          *string `json:"id,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Status      *Status `json:"status,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Todo struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Status      Status `json:"status"`
}

type UpdateInput struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Status      Status `json:"status"`
}

type UpdateStatusInput struct {
	ID     string `json:"id"`
	Status Status `json:"status"`
}

type UpdateStatusOutput struct {
	ID     string `json:"id"`
	Status Status `json:"status"`
}

type Status string

const (
	StatusUnknown    Status = "UNKNOWN"
	StatusInitiate   Status = "INITIATE"
	StatusInProgress Status = "IN_PROGRESS"
	StatusDrop       Status = "DROP"
	StatusDone       Status = "DONE"
)

var AllStatus = []Status{
	StatusUnknown,
	StatusInitiate,
	StatusInProgress,
	StatusDrop,
	StatusDone,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusUnknown, StatusInitiate, StatusInProgress, StatusDrop, StatusDone:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
